/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) throws FileNotFoundException {
        Main main = new Main();
        System.out.println(main.javaScriptLinter("oneError.js"));
    }


    public ArrayList<String> javaScriptLinter(String fileName) throws FileNotFoundException {
        // get the default path of resources folder by using Classloader object.
        ClassLoader classLoader = getClass().getClassLoader();
        String path = classLoader.getResource(fileName).getPath();

        // Read jsFile from resources folder by using a new object from File class that store jsFile inside it.
        File jsFile = new File(path);



        // Read the first line in jsFile by use Scanner class.
        /*
         We must add an exception (throws FileNotFoundException) in javaScriptLinter line
         to tell compiler don't worry about if the file is not found.
         */
        Scanner jsFileScan = new Scanner(jsFile);

        /*
         Two initial variables to store the line number of jsFile that will have it from while loop in line 35;
         And all lines of jsFile that will have it from while loop in line 40 by using .nextLine() which will be read
         jsFile line by using the new object From Scanner class (jsFileScan)
         */
        int lineCount = 0;
        String lines = "";

        // Create an initial arrayList that will store the errorLines.
        ArrayList<String> errorLines = new ArrayList<>();

        // Using a while loop to access all lines in jsFile, and assign values to lineCount and lines initial variables.
        while (jsFileScan.hasNextLine()){
            // Every loop into the next line will increase lineCount value by 1 who will represent the line number of jsFile.
            lineCount = lineCount + 1;

            //the method .nextLine to assign the lines of jsFile line by line to the lines initial variable.
            lines = jsFileScan.nextLine();

            /*
            The if statement here check the lines if jsFile line by line in etch loop if it's not contain
            a semicolon and an opening curly brace and a closing curly brace and if and else and empty string.
             */
            if (
                    !lines.endsWith(";")
                    &&!lines.endsWith("{")
                    &&!lines.endsWith("}")
                    &&!lines.contains("if")
                    &&!lines.contains("else")
                    &&!lines.startsWith("//")
                    &&!lines.equals("")){
                // if the above condition is true we will add the error message to errorLines ArrayList.
                errorLines.add("\n" + "Line " + lineCount +  ": Missing semicolon.");
            }
        }
        return errorLines;
    }
}
